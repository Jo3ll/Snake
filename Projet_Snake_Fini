from tkinter import * 
from tkinter import font as tkfont
from random import randint

from PIL import Image, ImageTk
# On crée un environnement Tkinter
tk = Tk()
# Importation des images
im_teteN = Image.open("teteN.png")
teteN = ImageTk.PhotoImage(im_teteN)
im_teteS = Image.open("teteS.png")
teteS = ImageTk.PhotoImage(im_teteS)
im_teteE = Image.open("teteE.png")
teteE = ImageTk.PhotoImage(im_teteE)
im_teteW = Image.open("teteW.png")
teteW = ImageTk.PhotoImage(im_teteW)
im_noeud1 = Image.open("noeud1.png")
noeud1 = ImageTk.PhotoImage(im_noeud1)
im_noeud2 = Image.open("noeud2.png")
noeud2 = ImageTk.PhotoImage(im_noeud2)
pomme = Image.open("pomme.png")
pomme = ImageTk.PhotoImage(pomme)
pomme_poison = Image.open("pomme_piege.png")
pomme_poison = ImageTk.PhotoImage(pomme_poison)

# Création du score à la fin de la partie
score = 0 

def right(event):
    # Modification de la variable globale direction
    global direction
    direction = 'right'
    
def left(event):
    global direction
    direction = 'left'
    
def down(event):
    global direction
    direction = 'down'
    
def up(event):
    global direction
    direction = 'up'

# Calcule la nouvelle frame de jeu
def computeNextFrame(numFrame,coordonnee, objet, objet2):
    global direction
    global score
    mort = False
    # Affiche le numéro de la frame
    numFrame = numFrame + 1
    
    # Effacer le canvas
    can.delete('all')
    
    # Propagation des coordonnées des noeuds
    for n in range (len(coordonnee)-1,0,-1):
        coordonnee[n][0] = coordonnee[n-1][0]
        coordonnee[n][1] = coordonnee[n-1][1]
        
    # Mise à jour des coordonnées
    if direction == 'right':
        coordonnee[0][0] += 20
        can.create_image(coordonnee[0][0], coordonnee[0][1], anchor = NW, image = teteE)
        if coordonnee[0][0] > 480:
            coordonnee[0][0] = 0
    elif direction == 'left':
        coordonnee[0][0] += -20
        can.create_image(coordonnee[0][0], coordonnee[0][1], anchor = NW, image = teteW)
        if coordonnee[0][0] < 0:
            coordonnee[0][0] = 480
    elif direction == 'up':
        coordonnee[0][1] += -20
        can.create_image(coordonnee[0][0], coordonnee[0][1], anchor = NW, image = teteN)
        if coordonnee[0][1] < 0:
            coordonnee[0][1] = 480
    elif direction == 'down':
        coordonnee[0][1] += 20
        can.create_image(coordonnee[0][0], coordonnee[0][1], anchor = NW, image = teteS)
        if coordonnee[0][1] > 480:
            coordonnee[0][1] = 0

    for n in range(1,len(coordonnee)):
        if n%2 == 0:
            can.create_image(coordonnee[n][0], coordonnee[n][1], anchor = NW, image = noeud1)
        else:
            can.create_image(coordonnee[n][0], coordonnee[n][1], anchor = NW, image = noeud2)
        
    # Dessine les objets
    for p in range(len(objet)):
        can.create_image(objet[0][0], objet[0][1], anchor = NW, image = pomme)
        
    for p in range(len(objet)):
        if coordonnee[0][0] == objet [0][0] and coordonnee[p][1] == objet [p][1]:
            # Déplacement de la pomme
            objet[0][0] = randint(1,24)* 20
            objet[0][1] = randint(1,24)* 20
            # Ajout d'un noeud au serpent (à la même place que le dernier noeud)
            coordonnee.append([-20, -20]) # Caché pour l'instant
            score = score + 1            
                        
    for p in range(len(objet2)):
        can.create_image(objet2[0][0], objet2[0][1], anchor = NW, image = pomme_poison)   
    
    for p in range(len(objet2)):
        # Si le serpent mange la pomme empoisonnée
        if coordonnee[0][0] == objet2 [0][0] and coordonnee[p][1] == objet2 [p][1]:
            # C'est fini
            mort = True
    
    game_over = False     
    # On test la position de la tête par rapport aux noeuds du serpent
    for n in range(1,len(coordonnee)): # L'indice 0 est exclu, c'est la tête
        if coordonnee[0][0] == coordonnee [n][0] and coordonnee[p][1] == coordonnee [n][1]:
            game_over = True # La partie est finie
        if mort == True: # On test si le serpent à mangé la pomme empoisonnée
            game_over = True # La partie est finie
            
    if game_over :
        # Fin de partie
        TEXTE = "GAME OVER"
        normal_font = tkfont.Font(family="Arial", size=20, weight="bold")
        can.create_text(250, 250, text = TEXTE, fill='red',  font=normal_font)
        score = str(score)
        normal_font = tkfont.Font(family="Helvetica", size=12, weight="bold", slant="italic")
        can.create_text(50, 50, text = "score = "+score, fill='white',  font=normal_font)
        
    else:
        # La partie n'est pas finie
        # Calcule une nouvelle frame dans 100 ms
        tk.after(50, lambda:computeNextFrame(numFrame,coordonnee, objet, objet2))
    
if __name__ == "__main__":
    # La fenêtre et le background
    can = Canvas(tk, width=500, height=500, bg='black')
    # On affiche le canvas
    can.pack()
    # Direction par défaut
    direction = 'up'
    # Appuyer sur la touche 'd' appellera la fonction right()
    # La touche 'q' la fonction left, etc..
    tk.bind('<d>', right)
    tk.bind('<q>', left)
    tk.bind('<s>', down)
    tk.bind('<z>', up)
    
    coordonnee = [ [200, 200], [200, 220], [200, 240], [220, 240] ]
    
    # La pomme
    objet = []
    x = randint(1,24)
    y = randint(1,24)
    objet.append([x*20, y*20, 0])

    # Second objet (le poison)
    objet2 = []
    j = randint(1,24)
    d = randint(1,24)
    objet2.append([j*20, d*20, 0])
    
    # Construction de la première étape de simulation
    computeNextFrame(0, coordonnee, objet, objet2)
    
    # lancement de la boucle principale qui écoute les évènements
    tk.mainloop()
